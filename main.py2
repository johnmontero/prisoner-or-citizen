# -*- coding: utf-8 -*-
import sys
import os
import math

PRISIONER = 'Prisoner'
CITIZEN = 'Citizen'
HORARIA = 'Horaria'
ANTIHORARIA = 'Antihoraria'

def get_condition_person(coordinates_table):
    condition = PRISIONER
    angles = 0
    for coordinates in coordinates_table:
        angle = calcute_angle(coordinates[0], coordinates[1])
        direction = get_calcute_direction_angle(coordinates[0], coordinates[1])

        if direction == HORARIA:
            angle = angle * -1

        angles +=  angle

    if angles == 0:
        condition = CITIZEN

    return condition

def changeToCoordinate(coordinate):
    if type(coordinate) is not type(tuple()):
        (x, y) = coordinate.strip().split(' ')
        return ( int(x), int(y) )
    return coordinate

def get_coordinate_table(coordinates):
    coordinates_list = coordinates.split(',')
    length = len(coordinates_list)
    table = []
    for i in range(0, length):
        ii = i + 1
        if ii > length - 1:
            ii = 0

        table.append([
            changeToCoordinate(coordinates_list[i]),
            changeToCoordinate(coordinates_list[ii]),
        ])
    return table

def get_vectors_list(coordinates_jail, coordinate_person):
    coordinates_list = coordinates_jail.split(',')
    length = len(coordinates_list)
    table = []
    for i in range(0, length):
        vector = calcute_vector(
                    changeToCoordinate(coordinates_list[i]),
                    coordinate_person)
        table.append(vector)

    return table

def get_vectors_table(coordinates_vectors_table, coordinate_person):
    table = []
    length = len(coordinates_vectors_table)
    for i in range(0, length):
        ii = i + 1
        if ii > length - 1:
            ii = 0
        table.append([
            changeToCoordinate(coordinates_vectors_table[i]),
            changeToCoordinate(coordinates_vectors_table[ii]),
        ])
    return table

def calcute_vector(p0, p1):
    return (p1[0] - p0[0], p1[1] - p0[1])

def calcute_angle(p0, p1):
    p0_x_p1 = (p0[0] * p1[0]) + (p0[1] * p1[1])
    p0_abs = math.sqrt((p0[0])**2 + (p0[1])**2)
    p1_abs = math.sqrt((p1[0])**2 + (p1[1])**2)
    return math.degrees(math.acos(p0_x_p1 / (p0_abs * p1_abs)))

def get_calcute_direction_angle(p0, p1):
    direction = HORARIA
    p0_p1 = (p0[0] * p1[1]) - (p0[1] * p1[0])
    p0_sqrt = math.sqrt((p0[0])**2 + (p0[1])**2)
    p1_sqrt = math.sqrt((p1[0])**2 + (p1[1])**2)

    if (p0_p1 / (p0_sqrt * p1_sqrt )) > 0:
        direction = ANTIHORARIA
    return direction

def main(filename):
    with open(filename, 'r') as f:
        for line in f:
            # Obtener coordenadas de la prision y la persona
            ( coordinates_jail, coordinate_person) = line.split('|')

            # Cambiar de texto a una tupla las coordenadas
            coordinate_person = changeToCoordinate(coordinate_person.strip())

            # Obtener vectores de las coordenas de la prision en un lista
            vetors_list = get_vectors_list(coordinates_jail, coordinate_person)

            # Obtener la tabla de vectores en el sectido indicado en el
            # archivo leido
            coordinates_vectors_table = get_vectors_table(
                vetors_list,
                coordinate_person
            )

            # Obtener la condicion de la persona basado en sus coordenadas con
            # respecto a las coordenadas de la prision
            condition_person = get_condition_person(coordinates_vectors_table)

            # Imprimer la condicion de la person
            print "{}".format(condition_person)

def show_message(message):
    print
    print "{}".format(message)
    print

if __name__ == '__main__':

    if len(sys.argv) < 2:
        show_message('You must enter the name of the .TXT file')
        exit(1)

    if not os.path.exists(sys.argv[1]):
        show_message('File does not exist')
        exit(1)

    # Ejecutar funcion principal
    main(sys.argv[1])
